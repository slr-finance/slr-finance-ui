/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common'

export interface MilkyWayInterface extends utils.Interface {
  functions: {
    'baybackStat(uint256)': FunctionFragment
    'bnbAddress()': FunctionFragment
    'investStat(uint256)': FunctionFragment
    'owner()': FunctionFragment
    'recoverFunds(address,uint256,address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'slrAddress()': FunctionFragment
    'slrPairAddress()': FunctionFragment
    'totalBayback()': FunctionFragment
    'totalInvested()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'calcAmountToBayback()': FunctionFragment
    'calcAmountToInvest()': FunctionFragment
    'bayBack()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'baybackStat'
      | 'bnbAddress'
      | 'investStat'
      | 'owner'
      | 'recoverFunds'
      | 'renounceOwnership'
      | 'slrAddress'
      | 'slrPairAddress'
      | 'totalBayback'
      | 'totalInvested'
      | 'transferOwnership'
      | 'calcAmountToBayback'
      | 'calcAmountToInvest'
      | 'bayBack',
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'baybackStat', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'bnbAddress', values?: undefined): string
  encodeFunctionData(functionFragment: 'investStat', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'recoverFunds',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'slrAddress', values?: undefined): string
  encodeFunctionData(functionFragment: 'slrPairAddress', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalBayback', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalInvested', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'calcAmountToBayback', values?: undefined): string
  encodeFunctionData(functionFragment: 'calcAmountToInvest', values?: undefined): string
  encodeFunctionData(functionFragment: 'bayBack', values?: undefined): string

  decodeFunctionResult(functionFragment: 'baybackStat', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bnbAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'investStat', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'recoverFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'slrAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'slrPairAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalBayback', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalInvested', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'calcAmountToBayback', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'calcAmountToInvest', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bayBack', data: BytesLike): Result

  events: {
    'Bayback(uint128,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Bayback'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface BaybackEventObject {
  bnbAmount: BigNumber
  slrAmount: BigNumber
}
export type BaybackEvent = TypedEvent<[BigNumber, BigNumber], BaybackEventObject>

export type BaybackEventFilter = TypedEventFilter<BaybackEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface MilkyWay extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: MilkyWayInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    baybackStat(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        bnbAmount: BigNumber
        slrAmount: BigNumber
        lpMinted: BigNumber
        timestamp: number
      }
    >

    bnbAddress(overrides?: CallOverrides): Promise<[string]>

    investStat(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { amount: BigNumber; timestamp: number }>

    owner(overrides?: CallOverrides): Promise<[string]>

    recoverFunds(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    slrAddress(overrides?: CallOverrides): Promise<[string]>

    slrPairAddress(overrides?: CallOverrides): Promise<[string]>

    totalBayback(overrides?: CallOverrides): Promise<[BigNumber]>

    totalInvested(overrides?: CallOverrides): Promise<[BigNumber]>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    calcAmountToBayback(overrides?: CallOverrides): Promise<[BigNumber] & { amountToBayback: BigNumber }>

    calcAmountToInvest(overrides?: CallOverrides): Promise<[BigNumber] & { amountToInvest: BigNumber }>

    bayBack(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>
  }

  baybackStat(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number] & {
      bnbAmount: BigNumber
      slrAmount: BigNumber
      lpMinted: BigNumber
      timestamp: number
    }
  >

  bnbAddress(overrides?: CallOverrides): Promise<string>

  investStat(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, number] & { amount: BigNumber; timestamp: number }>

  owner(overrides?: CallOverrides): Promise<string>

  recoverFunds(
    tokenAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  slrAddress(overrides?: CallOverrides): Promise<string>

  slrPairAddress(overrides?: CallOverrides): Promise<string>

  totalBayback(overrides?: CallOverrides): Promise<BigNumber>

  totalInvested(overrides?: CallOverrides): Promise<BigNumber>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  calcAmountToBayback(overrides?: CallOverrides): Promise<BigNumber>

  calcAmountToInvest(overrides?: CallOverrides): Promise<BigNumber>

  bayBack(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  callStatic: {
    baybackStat(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        bnbAmount: BigNumber
        slrAmount: BigNumber
        lpMinted: BigNumber
        timestamp: number
      }
    >

    bnbAddress(overrides?: CallOverrides): Promise<string>

    investStat(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { amount: BigNumber; timestamp: number }>

    owner(overrides?: CallOverrides): Promise<string>

    recoverFunds(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    slrAddress(overrides?: CallOverrides): Promise<string>

    slrPairAddress(overrides?: CallOverrides): Promise<string>

    totalBayback(overrides?: CallOverrides): Promise<BigNumber>

    totalInvested(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    calcAmountToBayback(overrides?: CallOverrides): Promise<BigNumber>

    calcAmountToInvest(overrides?: CallOverrides): Promise<BigNumber>

    bayBack(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'Bayback(uint128,uint256)'(bnbAmount?: null, slrAmount?: null): BaybackEventFilter
    Bayback(bnbAmount?: null, slrAmount?: null): BaybackEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter
  }

  estimateGas: {
    baybackStat(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    bnbAddress(overrides?: CallOverrides): Promise<BigNumber>

    investStat(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    recoverFunds(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    slrAddress(overrides?: CallOverrides): Promise<BigNumber>

    slrPairAddress(overrides?: CallOverrides): Promise<BigNumber>

    totalBayback(overrides?: CallOverrides): Promise<BigNumber>

    totalInvested(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    calcAmountToBayback(overrides?: CallOverrides): Promise<BigNumber>

    calcAmountToInvest(overrides?: CallOverrides): Promise<BigNumber>

    bayBack(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>
  }

  populateTransaction: {
    baybackStat(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    bnbAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    investStat(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    recoverFunds(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    slrAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    slrPairAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalBayback(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalInvested(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    calcAmountToBayback(overrides?: CallOverrides): Promise<PopulatedTransaction>

    calcAmountToInvest(overrides?: CallOverrides): Promise<PopulatedTransaction>

    bayBack(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>
  }
}
